# Makefile for macOS

GOCMD=go
GOBUILD=$(GOCMD) build
GOCLEAN=$(GOCMD) clean
GOTEST=$(GOCMD) test
GOMOD=$(GOCMD) mod

AGENT_BINARY=fluidity-agent
SERVER_BINARY=fluidity-server
WAKE_LAMBDA_BINARY=bootstrap
BUILD_DIR=build
AGENT_DIR=cmd/agent
SERVER_DIR=cmd/server
WAKE_LAMBDA_DIR=cmd/lambda/wake

.PHONY: all build clean test deps run-agent-local run-server-local docker-build-agent docker-build-server build-lambda-wake package-lambda-wake

all: clean deps build

build: build-agent build-server

build-agent:
	@echo "Building agent..."
	@mkdir -p $(BUILD_DIR)
	$(GOBUILD) -o $(BUILD_DIR)/$(AGENT_BINARY) ./$(AGENT_DIR)

build-server:
	@echo "Building server..."
	@mkdir -p $(BUILD_DIR)
	$(GOBUILD) -o $(BUILD_DIR)/$(SERVER_BINARY) ./$(SERVER_DIR)

# Build Lambda functions for AWS (Linux AMD64)
build-lambda-wake:
	@echo "Building Wake Lambda for AWS Lambda (linux/amd64)..."
	@mkdir -p $(BUILD_DIR)/lambda
	GOOS=linux GOARCH=amd64 CGO_ENABLED=0 $(GOBUILD) -o $(BUILD_DIR)/lambda/$(WAKE_LAMBDA_BINARY) ./$(WAKE_LAMBDA_DIR)

# Package Lambda for deployment
package-lambda-wake: build-lambda-wake
	@echo "Creating Wake Lambda deployment package..."
	cd $(BUILD_DIR)/lambda && zip -q wake-lambda.zip $(WAKE_LAMBDA_BINARY)
	@echo "Wake Lambda package created: $(BUILD_DIR)/lambda/wake-lambda.zip"

clean:
	@echo "Cleaning..."
	rm -rf $(BUILD_DIR)

run-agent-local:
	@echo "Running agent locally (local config)..."
	$(GOBUILD) -o $(BUILD_DIR)/$(AGENT_BINARY) ./$(AGENT_DIR)
	./$(BUILD_DIR)/$(AGENT_BINARY) --config ./configs/agent.local.yaml

run-server-local:
	@echo "Running server locally (local config)..."
	$(GOBUILD) -o $(BUILD_DIR)/$(SERVER_BINARY) ./$(SERVER_DIR)
	./$(BUILD_DIR)/$(SERVER_BINARY) --config ./configs/server.local.yaml

deps:
	@echo "Downloading dependencies..."
	$(GOMOD) download
	$(GOMOD) tidy

test:
	@echo "Running tests..."
	$(GOTEST) -v ./internal/...
	$(GOTEST) -v ./cmd/lambda/...

fmt:
	@echo "Formatting code..."
	$(GOCMD) fmt ./...

docker-build-agent: build-agent
	@echo "Building agent Docker image..."
	docker build -t fluidity-agent -f deployments/agent/Dockerfile .

docker-build-server: build-server
	@echo "Building server Docker image..."
	docker build -t fluidity-server -f deployments/server/Dockerfile .
